/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmltype SignalSpy
    \instantiates SignalSpy
    \inqmlmodule QtTest
    \brief Enables introspection of signal emission
    \ingroup qtquick-utility
    \since 4.8
    \ingroup qtest::qml

    In the following example, a SignalSpy is installed to watch the
    "clicked" signal on a user-defined Button type.  When the signal
    is emitted, the \l count property on the spy will be increased.

    \code
    Button {
        id: button
        SignalSpy {
            id: spy
            target: button
            signalName: "clicked"
        }
        TestCase {
            name: "ButtonClick"
            function test_click() {
                compare(spy.count, 0)
                button.clicked();
                compare(spy.count, 1)
            }
        }
    }
    \endcode

    The above style of test is suitable for signals that are emitted
    synchronously.  For asynchronous signals, the wait() method can be
    used to block the test until the signal occurs (or a timeout expires).

    \sa TestCase
*/

/*!
    \qmlproperty object SignalSpy::target

    This property defines the target object that will be used to
    listen for emissions of the \l signalName signal.

    \sa signalName, count
*/

/*!
    \qmlproperty string SignalSpy::signalName

    This property defines the name of the signal on \l target to
    listen for.

    \sa target, count
*/

/*!
    \qmlproperty list SignalSpy::signalArguments

    This property holds a list of emitted signal arguments. Each emission of the signal will append one item to the list, containing the arguments of the signal.
    When connecting to a new \l target or new \l signalName or calling the \l clear() method, the \l signalArguments will be reset to empty.

    \sa signalName, clear()
    \readonly
*/

/*!
    \qmlproperty bool SignalSpy::valid

    This property defines the current signal connection status. It will be true when the \l signalName of the \l target is connected successfully, otherwise it will be false.

    \sa count, target, signalName, clear()
    \readonly
*/

/*!
    \qmlproperty int SignalSpy::count

    This property defines the number of times that \l signalName has
    been emitted from \l target since the last call to clear().

    \sa target, signalName, clear()
    \readonly
*/

/*!
    \qmlmethod SignalSpy::clear()

    Clears \l count to 0, resets \l valid to false and clears the \l signalArguments to empty.

    \sa count, wait()
*/

/*!
    \qmlmethod SignalSpy::wait(timeout = 5000)

    Waits for the signal \l signalName on \l target to be emitted,
    for up to \a timeout milliseconds.  The test case will fail if
    the signal is not emitted.

    \code
    SignalSpy {
        id: spy
        target: button
        signalName: "clicked"
    }

    function test_async_click() {
        ...
        // do something that will cause clicked() to be emitted
        ...
        spy.wait()
        compare(spy.count, 1)
    }
    \endcode

    There are two possible scenarios: the signal has already been
    emitted when wait() is called, or the signal has not yet been
    emitted.  The wait() function handles the first scenario by immediately
    returning if the signal has already occurred.

    The clear() method can be used to discard information about signals
    that have already occurred to synchronize wait() with future signal
    emissions.

    \sa clear(), TestCase::tryCompare()
*/
